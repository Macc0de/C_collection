// Написание программы для поиска наиболее часто встречающегося слова в строке
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h> // strlen
#include <ctype.h> // tolower

char* stroka(const char* s) { // Вместо strdup
	char* d = (char*)malloc(strlen(s) + 1); // +1 из за '\0'  
	if (d == NULL)                         // Проверка на память
		return NULL;          
	strcpy(d, s);                        // d - буфер назначения, туда копируем s
	return d;      
}

void func(char* msg) { 
	int i = 0;
	int j = 0;
	char* words[30];
	int count[30] = {0}; // Счетчик
	char* token = strtok(msg, ","); // разбиение строки на части по указанному разделителю
	while (token != NULL) {
		for (i = 0; i < strlen(token); i++)
			token[i] = tolower(token[i]); // переводим в нижний регистр
		words[j] = stroka(token); // strdup - копирует строку
		j++; // увеличиваем кол-во слов, которые добавили words[j]
		token = strtok(NULL, ","); 
	}
	for (i = 0; i < j; i++) // Встречающиеся слова
	{
		for (int j = 0; j < 30; j++)
		{
			if (strcmp(words[i], words[j]) == 0) // Сравнение строк | Если одинаковые возвращает 0
			{ // words[i] имеет нулевое значение для сравнения с тем где есть
				count[j]++; 
				break;
			}
		}
	}
	int max_count = 0;
	int max_index = 0;
	for (i = 0; i < 30; i++)
	{
		if (count[i] > max_count)
		{
			max_count = count[i];
			max_index = i; // будет выводить по индексу слова которые повтор
		}
	}
	printf("%s ", words[max_index]); // strawberry,banana,apple,apple
	printf("%d ", max_count); // кол-во потвор слов
}

int main()
{
	char msg[30];
	fgets(msg, 30, stdin);
	func(msg);
	return 0;
}